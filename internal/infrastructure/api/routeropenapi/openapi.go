// Package routeropenapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package routeropenapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"gb/backend1_course/internal/infrastructure/api/handlers"
	"gb/backend1_course/internal/infrastructure/utils"
	"html/template"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	log "github.com/sirupsen/logrus"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

type Link handlers.Link

func (Link) Bind(r *http.Request) error {
	return nil
}

func (Link) Render(w http.ResponseWriter, r *http.Request) error {
	return nil
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            *handlers.Handlers
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateLink operation middleware
func (siw *ServerInterfaceWrapper) CreateLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{""})
	err := r.ParseForm()
	if err != nil {
		panic(err)
	}

	url := r.PostFormValue("link")
	if ok := utils.IsURL(url); !ok {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "link", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		log.Infoln("Start create link")
		link, err := siw.Handler.CreateLink(ctx, url)
		if err != nil {
			log.Errorln(err)
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		}

		tpl := template.Must(template.ParseFiles("./templates/create_link.html"))
		err = tpl.Execute(w, link)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
			return
		}
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteLink operation middleware
func (siw *ServerInterfaceWrapper) DeleteLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameter("simple", false, "hash", chi.URLParam(r, "hash"), &hash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Api_keyScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLink(ctx, hash, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetLink operation middleware
func (siw *ServerInterfaceWrapper) GetLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameter("simple", false, "hash", chi.URLParam(r, "hash"), &hash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		link, err := siw.Handler.GetLink(ctx, hash, r)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
			return
		}

		http.Redirect(w, r, link.Link, http.StatusSeeOther)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetStat operation middleware
func (siw *ServerInterfaceWrapper) GetStat(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameter("simple", false, "hash", chi.URLParam(r, "hash"), &hash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		link, err := siw.Handler.GetStat(ctx, hash)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
			return
		}

		tpl := template.Must(template.ParseFiles("./templates/stat_link.html"))
		err = tpl.Execute(w, link)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
			return
		}
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

func (siw *ServerInterfaceWrapper) MainPage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		tpl := template.Must(template.ParseFiles("./templates/index.html"))
		err := tpl.Execute(w, nil)
		if err != nil {
			return
		}
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si *handlers.Handlers) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si *handlers.Handlers, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si *handlers.Handlers, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si *handlers.Handlers, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get("/", wrapper.MainPage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/l", wrapper.CreateLink)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/l/{hash}", wrapper.DeleteLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/l/{hash}", wrapper.GetLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/stat/{hash}", wrapper.GetStat)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7SVTW/bOBCG/woxu0fGVhLvHnTb7UcatEAPPgZGQYtji4lEsuTQrhDovxek5C8pbpMC",
	"PiUmhzPvPPOSeobC1NZo1OQhfwZflFiL9O8XpZ/iX+uMRUcK06qQtdJVv0WNRcjBk1N6DS2HwgRNcWdl",
	"XC0IclCa/p0B34UqTbhGF2NL4csXkyh5kiEEJQ8JjsLsnEQq9rfDFeTw1/TQy7RvZBq7SHEthzOy231y",
	"s3zEIoXuj40AvFrdUSUd6mVselyp5eCxCE5RM4+Ke8hWfXvCJpXTkEOJQqIDDlrU8fRuf59OWPUZG2hj",
	"PqVXJtVWVMW9eWkcsdgQm6PbqAKBwwadVybmvp5kkywqNha1sApyuJ1kk1vgYAWVSc+0ShyMTzwiDUHK",
	"6HsJObxzKAiTWTg4/B7Q0/9GJvGF0YSdIYS1lSrSsemPq+12exURXgVXoS6MRHlw35j5+cHFgsrF0w9d",
	"1GKM+CSMXMC04K3Rvkt/k13/Qu2jj5yOxf3Ob11Nib5wylKHOfEvEisZac+yf2Kq06B7vRGVkkxpG07N",
	"AfnDkS0eFu2Cgw91LVwDOfwnJRNM45ZFBowMoxKZ30+bxNrvCHlYxMTTavocb2DbqaiQcDzb92m9n60V",
	"TtRI6HwS80J7SsbSfTLeWTd66GDcdOeH4+BHaIcTXgxGNcuy89g+CV8yH+LsdpBn4+gkVRtiKxO0fAPl",
	"joZnIlEeYIVFy2GNL1yQO6TXEEzizWo/QYcUnL4QxtvsZgzmzsS6lel8D7x/drqPwW715CIMy7RvYb7n",
	"+lFp2bW9bFjf2gBtNKwnQUeePcc6vdp/xJrFCsqTKi5E/aYz70XfmTukQx/MijXCxYbS7peGqT9s0DVU",
	"Kr1mYmkCscYEl75B/sCze41aPjz8dTdS3x8O/vjjl361i/ZnAAAA///+DkoguwgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
